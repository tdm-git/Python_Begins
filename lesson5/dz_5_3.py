# Есть два списка
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>)
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов,
# чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None)
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
# Подумать, в каких ситуациях генератор даст эффект.


def my_zip():                           # пишем свой генератор для случая когда tutors может быть длинее
    for i, tutor in enumerate(tutors):  # для случаев когда (<tutor>, None)
        if i < len(klasses):
            klass = klasses[i]
        else:
            klass = None
        yield (tutor, klass)

result = my_zip()
print(result)        # демонстрируем что результат именно генератор
print(next(result))  # для него доступен метод next()
print(*result)       # оператор * выведет оставшиеся элементы
print(*my_zip())     # или полный спсиок

result = ((a, b) for a, b in zip(tutors, klasses))  # по примеру для задачи tutors короче поэтому можем использовать zip
print(result)   # демонстрируем что результат именно генератор
print(*result)  # выводим список



